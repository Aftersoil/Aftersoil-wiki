(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{478:function(t,s,a){"use strict";a.r(s);var e=a(12),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"记录每次更新到仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#记录每次更新到仓库"}},[t._v("#")]),t._v(" 记录每次更新到仓库")]),t._v(" "),a("p",[t._v("现在我们手上有了一个真实项目的 Git 仓库，并从这个仓库中取出了所有文件的工作拷贝。 接下来，对这些文件做些修改，在完成了一个阶段的目标之后，提交本次更新到仓库。")]),t._v(" "),a("p",[t._v("请记住，你工作目录下的每一个文件都不外乎这两种状态：已跟踪 或 未跟踪。")]),t._v(" "),a("ul",[a("li",[t._v("已跟踪")])]),t._v(" "),a("p",[t._v("指那些被纳入了版本控制的文件，在上一次快照中有它们的记录，在工作一段时间后，它们的状态可能处于未修改，已修改或已放入暂存区")]),t._v(" "),a("ul",[a("li",[t._v("未跟踪")])]),t._v(" "),a("p",[t._v("工作目录中除已跟踪文件以外的所有其它文件都属于未跟踪文件，它们既不存在于上次快照的记录中，也没有放入暂存区。 初次克隆某个仓库的时候，工作目录中的所有文件都属于已跟踪文件，并处于未修改状态。")]),t._v(" "),a("p",[a("strong",[t._v("编辑")]),t._v(" 过某些文件之后，由于自上次提交后你对它们做了修改，Git 将它们标记为 "),a("strong",[t._v("已修改文件")]),t._v("。 我们逐步将这些修改过的文件 "),a("strong",[t._v("放入暂存区")]),t._v("，然后提交所有暂存了的修改，如此反复。所以使用 Git 时文件的生命周期如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://images.aftersoil.xyz/wiki/image/Git/git-5.png",alt:"alt text"}})]),t._v(" "),a("h2",{attrs:{id:"检查当前文件状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#检查当前文件状态"}},[t._v("#")]),t._v(" 检查当前文件状态")]),t._v(" "),a("p",[t._v("要查看哪些文件处于什么状态，可以用 "),a("code",[t._v("git status")]),t._v(" 命令。 如果在克隆仓库后立即使用此命令，会看到类似这样的输出：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# On branch master")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# nothing to commit, working directory clean")]),t._v("\n")])])]),a("p",[t._v("这说明你现在的工作目录相当干净。换句话说，所有已跟踪文件在上次提交后都未被更改过。 此外，上面的信息还表明，当前目录下没有出现任何处于未跟踪状态的新文件，否则 Git 会在这里列出来。 最后，该命令还 "),a("strong",[t._v("显示了当前所在分支")]),t._v("，并告诉你这个分支同远程服务器上对应的分支没有偏离。")]),t._v(" "),a("p",[t._v("现在，让我们在项目下创建一个新的 README 文件。 如果之前并不存在这个文件，使用 git status 命令，你将看到一个新的未跟踪文件：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'My Project'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" README\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# On branch master")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Untracked files:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#   (use "git add <file>..." to include in what will be committed)')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     README")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# nothing added to commit but untracked files present (use "git add" to track)')]),t._v("\n")])])]),a("p",[t._v("在状态报告中可以看到新建的 README 文件出现在 "),a("strong",[t._v("Untracked files")]),t._v(" 下面。 未跟踪的文件意味着 Git 在之前的快照（提交）中没有这些文件；Git 不会自动将之纳入跟踪范围，除非你明明白白地告诉它 「我需要跟踪该文件」， 这样的处理让你不必担心将生成的二进制文件或其它不想被跟踪的文件包含进来。 不过现在的例子中，我们确实想要跟踪管理 README 这个文件。")]),t._v(" "),a("h2",{attrs:{id:"跟踪新文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跟踪新文件"}},[t._v("#")]),t._v(" 跟踪新文件")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("注意："),a("code",[t._v("git add")]),t._v(" 理解为 添加内容到下一次提交中，而不是 将一个文件添加到项目中，否则就在这里你就会懵逼了，下一小节会解释为什么")])]),t._v(" "),a("p",[t._v("使用命令 git add 开始跟踪一个文件。 所以，要跟踪 README 文件，运行：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" README\n")])])]),a("p",[t._v("此时再运行 "),a("code",[t._v("git status")]),t._v(" 命令，会看到 README 文件已被跟踪，并处于 暂存状态：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# On branch master")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Changes to be committed:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#   (use "git reset HEAD <file>..." to unstage)')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     new file:   README")]),t._v("\n")])])]),a("p",[t._v("只要在 "),a("strong",[t._v("Changes to be committed")]),t._v(" 这行下面的，就说明是 已暂存状态。 如果此时提交，那么该文件此时此刻的版本将被留存在历史记录中。 你可能会想起之前我们使用 "),a("code",[t._v("git init")]),t._v(" 后就运行了 "),a("code",[t._v("git add (files)")]),t._v(" 命令，开始跟踪当前目录下的文件。 "),a("strong",[a("code",[t._v("git add")]),t._v(" 命令使用文件或目录的路径作为参数")]),t._v("；如果参数是目录的路径，该命令将递归地跟踪该目录下的所有文件。")]),t._v(" "),a("h2",{attrs:{id:"暂存已修改文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#暂存已修改文件"}},[t._v("#")]),t._v(" 暂存已修改文件")]),t._v(" "),a("p",[t._v("现在我们来修改一个已被跟踪的文件。 如果你修改了一个名为 "),a("code",[t._v("CONTRIBUTING.md")]),t._v(" 的已被跟踪的文件，然后运行 "),a("code",[t._v("git status")]),t._v(" 命令，会看到下面内容：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# On branch master")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Changes to be committed:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#   (use "git reset HEAD <file>..." to unstage)')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     new file:   README")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Changes not staged for commit:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#   (use "git add <file>..." to update what will be committed)')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#   (use "git checkout -- <file>..." to discard changes in working directory)')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     modified:   CONTRIBUTING.md")]),t._v("\n")])])]),a("p",[t._v("文件 "),a("code",[t._v("CONTRIBUTING.md")]),t._v(" 出现在 "),a("strong",[a("code",[t._v("Changes not staged for commit")])]),t._v(" 这行下面，说明 "),a("strong",[t._v("已跟踪文件的内容发生了变化，但还没有放到暂存区。 要暂存这次更新，需要运行 git add 命令。")]),t._v(" 这是个多功能命令：可以用它 "),a("strong",[t._v("开始跟踪新文件")]),t._v("，或者 "),a("strong",[t._v("把已跟踪的文件放到暂存区")]),t._v("，还能用于 合并时把有冲突的文件标记为已解决状态等。 将这个命令理解为「"),a("strong",[t._v("添加内容到下一次提交中")]),t._v("」而不是「将一个文件添加到项目中」要更加合适。 现在让我们运行 "),a("code",[t._v("git add")]),t._v(" 将「CONTRIBUTING.md」放到暂存区，然后再看看 "),a("code",[t._v("git status")]),t._v(" 的输出：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" CONTRIBUTING.md\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# On branch master")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Changes to be committed:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#   (use "git reset HEAD <file>..." to unstage)')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     new file:   README")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     modified:   CONTRIBUTING.md")]),t._v("\n")])])]),a("p",[t._v("现在两个文件都已暂存，下次提交时就会一并记录到仓库。 假设此时，你想要在 CONTRIBUTING.md 里再加条注释， 重新编辑存盘后，准备好提交。 不过且慢，再运行 "),a("code",[t._v("git status")]),t._v(" 看看：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vim")]),t._v(" CONTRIBUTING.md\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# On branch master")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Changes to be committed:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#   (use "git reset HEAD <file>..." to unstage)')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     new file:   README")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     modified:   CONTRIBUTING.md")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Changes not staged for commit:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#   (use "git add <file>..." to update what will be committed)')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#   (use "git checkout -- <file>..." to discard changes in working directory)')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     modified:   CONTRIBUTING.md")]),t._v("\n")])])]),a("p",[t._v("怎么回事？ 现在 CONTRIBUTING.md 文件同时出现在 "),a("strong",[t._v("暂存区")]),t._v(" 和 "),a("strong",[t._v("非暂存区")]),t._v("。 这怎么可能呢？ 好吧，实际上 Git 只不过暂存了你运行 "),a("code",[t._v("git add")]),t._v("命令时的版本， 如果你现在提交，CONTRIBUTING.md 的版本是你最后一次运行 "),a("code",[t._v("git add")]),t._v(" 命令时的那个版本，而不是你运行 "),a("code",[t._v("git commit")]),t._v(" 时，在工作目录中的当前版本。 所以，运行了 "),a("code",[t._v("git add")]),t._v(" 之后又作了修订的文件，需"),a("strong",[t._v("要重新运行 git add 把最新版本重新暂存起来：")])]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" CONTRIBUTING.md\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# On branch master")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Changes to be committed:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#   (use "git reset HEAD <file>..." to unstage)')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     new file:   README")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     modified:   CONTRIBUTING.md")]),t._v("\n")])])]),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git add {path}")]),t._v(" 是一个多功能命令"),a("br"),t._v("\n理解为："),a("strong",[t._v("添加内容到下一次提交中，而不是 将一个文件添加到项目中")]),a("br"),t._v("\n包含如下功能（只列出部分）：\n"),a("ul",[a("li",[t._v("开始跟踪新文件")]),t._v(" "),a("li",[t._v("把已跟踪的文件放到暂存区")]),t._v(" "),a("li",[t._v("合并时把有冲突的文件标记为已解决状态")])])]),t._v(" "),a("li",[a("code",[t._v("add {path}")]),t._v(" 中的 "),a("code",[t._v("path")]),t._v(" 可以是：\n"),a("ul",[a("li",[t._v("文件名：默认为当前项目仓库的根路径的 文件，比如 "),a("code",[t._v("xx.md")])]),t._v(" "),a("li",[t._v("路径名：根路径为当前项目仓库的根，比如 "),a("code",[t._v("xx/xx.md")])]),t._v(" "),a("li",[t._v("目录：将递归将该目录下的所有文件都添加")])])])]),t._v(" "),a("h2",{attrs:{id:"状态简览"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#状态简览"}},[t._v("#")]),t._v(" 状态简览")]),t._v(" "),a("p",[a("code",[t._v("git status")]),t._v(" 命令的输出十分详细，但其用语有些繁琐。 如果你使用 "),a("code",[t._v("git status -s")]),t._v(" 命令或 "),a("code",[t._v("git status –short")]),t._v(" 命令，你将得到一种更为紧凑的格式输出。 运行 "),a("code",[t._v("git status -s")]),t._v(" ，状态报告输出如下：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status -s\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# M README")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# MM Rakefile")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# A  lib/git.rb")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# M  lib/simplegit.rb")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ?? LICENSE.txt")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("??")]),t._v("：新添加的未跟踪文件")]),t._v(" "),a("li",[a("code",[t._v("A")]),t._v("：新添加到暂存区中的文件")]),t._v(" "),a("li",[a("code",[t._v("mm")]),t._v("：\n"),a("ul",[a("li",[t._v("出现在 左 边的 M：表示修改过的文件，并放入了暂存区")]),t._v(" "),a("li",[t._v("出现在 右 边的 M：表示该文件被修改过，但是还没放入暂存区")])])])]),t._v(" "),a("h2",{attrs:{id:"忽略文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#忽略文件"}},[t._v("#")]),t._v(" 忽略文件")]),t._v(" "),a("p",[t._v("一般我们总会有些文件 "),a("strong",[t._v("无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。")]),t._v(" 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以创建一个名为 "),a("code",[t._v(".gitignore")]),t._v(" 的文件，列出要忽略的文件模式。 来看一个实际的例子：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" .gitignore\n*."),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("oa"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n*~\n")])])]),a("ul",[a("li",[t._v("第一行告诉 Git 忽略所有以 "),a("code",[t._v(".o")]),t._v(" 或 "),a("code",[t._v(".a")]),t._v(" 结尾的文件")]),t._v(" "),a("li",[t._v("第二行告诉 Git 忽略所有以波浪符"),a("code",[t._v("（~）")]),t._v("结尾的文件")]),t._v(" "),a("li",[t._v("文件 "),a("code",[t._v(".gitignore")]),t._v(" 的格式规范如下：")]),t._v(" "),a("li",[t._v("所有空行或者以 "),a("code",[t._v("#")]),t._v(" 开头的行都会被 "),a("code",[t._v("Git")]),t._v(" 忽略。")]),t._v(" "),a("li",[t._v("可以使用标准的 "),a("code",[t._v("glob")]),t._v(" 模式匹配。\n"),a("ul",[a("li",[t._v("指 "),a("code",[t._v("shell")]),t._v(" 所使用的简化了的正则表达式")]),t._v(" "),a("li",[t._v("星号（"),a("code",[t._v("*")]),t._v("）匹配零个或多个任意字符;")]),t._v(" "),a("li",[a("code",[t._v("[abc]")]),t._v(" 匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）")]),t._v(" "),a("li",[t._v("问号（"),a("code",[t._v("?")]),t._v("）只匹配一个任意字符")]),t._v(" "),a("li",[t._v("如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 ["),a("code",[t._v("0-9")]),t._v("] 表示匹配所有 0 到 9 的数字）")]),t._v(" "),a("li",[t._v("使用两个星号（"),a("code",[t._v("*")]),t._v(") 表示匹配任意中间目录，比如 "),a("code",[t._v("a/**/z")]),t._v(" 可以匹配 "),a("code",[t._v("a/z")]),t._v(", "),a("code",[t._v("a/b/z")]),t._v(" 或 "),a("code",[t._v("a/b/c/z")]),t._v(" 等。")])])]),t._v(" "),a("li",[t._v("匹配模式可以以（"),a("code",[t._v("/")]),t._v("）开头防止递归。")]),t._v(" "),a("li",[t._v("匹配模式可以以（"),a("code",[t._v("/")]),t._v("）结尾指定目录。")]),t._v(" "),a("li",[t._v("要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（"),a("code",[t._v("!")]),t._v("）取反。\n"),a("ul",[a("li",[t._v("假设你有一个模式是 "),a("code",[t._v("*.a")]),t._v("，但是你又想跟踪 "),a("code",[t._v("lib.a")]),t._v(" 这个文件，就可以写成 "),a("code",[t._v("!lib.a")]),t._v("，类似于排除功能")])])]),t._v(" "),a("li",[t._v("我们再看一个 "),a("code",[t._v(".gitignore")]),t._v(" 文件的例子：")])]),t._v(" "),a("div",{staticClass:"language-gitignore extra-class"},[a("pre",{pre:!0,attrs:{class:"language-gitignore"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽略所有以 .a 结尾的文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token entry string"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(".a")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 即使你忽略了上面的 .a 文件，但是要包含 lib.a 文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token entry string"}},[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("lib.a")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 只忽略当前目录下的 TODO 文件，不忽略 subdir/TODO。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token entry string"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/")]),t._v("TODO")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽略 build/ 目录下的所有文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token entry string"}},[t._v("build"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽略 doc/notes.txt 文件, 但是不忽略 doc/server/arch.txt 文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token entry string"}},[t._v("doc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(".txt")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 忽略 doc/ 目录下的所有以 .pdf 结尾的文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token entry string"}},[t._v("doc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(".pdf")]),t._v("\n")])])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("注意：GitHub 有一个十分详细的针对数十种项目及语言的 "),a("code",[t._v(".gitignore")]),t._v(" 文件列表，你可以在"),a("a",{attrs:{href:"https://github.com/github/gitignore",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/github/gitignore"),a("OutboundLink")],1),t._v(" 找到它")])]),t._v(" "),a("h2",{attrs:{id:"查看已暂存和未暂存的修改-diff"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看已暂存和未暂存的修改-diff"}},[t._v("#")]),t._v(" 查看已暂存和未暂存的修改（diff）")]),t._v(" "),a("p",[t._v("如果 "),a("code",[t._v("git status")]),t._v(" 命令的输出对于你来说过于模糊，你想知道具体修改了什么地方，可以用 "),a("code",[t._v("git diff")]),t._v(" 命令。稍后我们会详细介绍 "),a("code",[t._v("git diff")]),t._v("，你可能通常会用它来回答这两个问题：")]),t._v(" "),a("ul",[a("li",[t._v("当前做的哪些更新还没有暂存？")]),t._v(" "),a("li",[t._v("有哪些更新已经暂存起来准备好了下次提交？")])]),t._v(" "),a("p",[t._v("尽管 "),a("code",[t._v("git status")]),t._v(" 已经通过在相应栏下列出文件名的方式回答了这个问题，"),a("code",[t._v("git diff")]),t._v(" 将通过文件补丁的格式显示具体哪些行发生了改变。")]),t._v(" "),a("p",[t._v("假如再次修改 README 文件后暂存，然后编辑 CONTRIBUTING.md 文件后先不暂存， 运行 "),a("code",[t._v("status")]),t._v(" 命令将会看到：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# On branch master")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Changes to be committed:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#   (use "git reset HEAD <file>..." to unstage)')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     modified:   README")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Changes not staged for commit:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#   (use "git add <file>..." to update what will be committed)')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#   (use "git checkout -- <file>..." to discard changes in working directory)')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     modified:   CONTRIBUTING.md")]),t._v("\n")])])]),a("p",[t._v("要查看 "),a("strong",[t._v("尚未暂存的文件")]),t._v(" 更新了哪些部分，不加参数直接输入 git diff：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# index 8ebb991..643e24f 100644")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# --- a/CONTRIBUTING.md")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# +++ b/CONTRIBUTING.md")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# @@ -65,7 +65,8 @@ branch directly, things can get messy.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  Please include a nice description of your changes when you submit your PR;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  if we have to read the whole diff to figure out why you're contributing")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  in the first place, you're less likely to get feedback and have your change")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -merged in.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# +merged in. Also, split your changes into comprehensive chunks if your patch is")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# +longer than a dozen lines.")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  If you are starting to work on a particular area, feel free to submit a PR")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  that highlights your work in progress (and note in the PR title that it's")]),t._v("\n")])])]),a("p",[t._v("此命令比较的是 "),a("strong",[t._v("工作目录中当前文件和暂存区域快照之间的差异，")]),t._v(" 也就是修改之后还没有暂存起来的变化内容。")]),t._v(" "),a("p",[t._v("若要查看 "),a("strong",[t._v("已暂存的将要添加到下次提交里的内容")]),t._v("，可以用 "),a("code",[t._v("git diff –cached")]),t._v(" 命令。（Git 1.6.1 及更高版本还允许使用 "),a("code",[t._v("git diff –staged")]),t._v("，效果是相同的，但更好记些。）")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" --staged\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# diff --git a/README b/README")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# new file mode 100644")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# index 0000000..03902a1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# --- /dev/null")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# +++ b/README")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# @@ -0,0 +1 @@")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# +My Project")]),t._v("\n")])])]),a("p",[t._v("请注意，"),a("strong",[a("code",[t._v("git diff")]),t._v(" 本身只显示尚未暂存的改动")]),t._v("，而不是自上次提交以来所做的所有改动。 所以有时候你一下子暂存了所有更新过的文件后，运行 "),a("code",[t._v("git diff")]),t._v(" 后却什么也没有，就是这个原因。")]),t._v(" "),a("p",[t._v("像之前说的，暂存 CONTRIBUTING.md 后再编辑，运行 "),a("code",[t._v("git status")]),t._v(" 会看到暂存前后的两个版本。 如果我们的环境（终端输出）看起来如下：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" CONTRIBUTING.md\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'# test line'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" CONTRIBUTING.md\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# On branch master")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Changes to be committed:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#   (use "git reset HEAD <file>..." to unstage)')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     modified:   CONTRIBUTING.md")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Changes not staged for commit:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#   (use "git add <file>..." to update what will be committed)')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#   (use "git checkout -- <file>..." to discard changes in working directory)')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     modified:   CONTRIBUTING.md")]),t._v("\n")])])]),a("p",[t._v("现在运行 git diff 看暂存前后的变化：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# index 643e24f..87f08c8 100644")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# --- a/CONTRIBUTING.md")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# +++ b/CONTRIBUTING.md")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# @@ -119,3 +119,4 @@ at the")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  ## Starter Projects")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  See our [projects list](https://github.com/libgit2/libgit2/blob/development/PROJECTS.md).")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# +# test line")]),t._v("\n")])])]),a("p",[t._v("然后用 "),a("code",[t._v("git diff –cached")]),t._v(" 查看已经暂存起来的变化：（"),a("code",[t._v("–staged")]),t._v(" 和 "),a("code",[t._v("–cached")]),t._v(" 是同义词）")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("diff")]),t._v(" --cached\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# index 8ebb991..643e24f 100644")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# --- a/CONTRIBUTING.md")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# +++ b/CONTRIBUTING.md")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# @@ -65,7 +65,8 @@ branch directly, things can get messy.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  Please include a nice description of your changes when you submit your PR;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  if we have to read the whole diff to figure out why you're contributing")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  in the first place, you're less likely to get feedback and have your change")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -merged in.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# +merged in. Also, split your changes into comprehensive chunks if your patch is")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# +longer than a dozen lines.")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  If you are starting to work on a particular area, feel free to submit a PR")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  that highlights your work in progress (and note in the PR title that it's")]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("上面是使用命令行方式来分析文件差异，还可以使用图形化方式：可以使用 "),a("code",[t._v("git difftool")]),t._v(" 命令来用 "),a("code",[t._v("Araxis")]),t._v(" "),a("code",[t._v("，emerge")]),t._v(" 或 "),a("code",[t._v("vimdiff")]),t._v(" 等软件输出 "),a("code",[t._v("diff")]),t._v(" 分析结果。 使用 "),a("code",[t._v("git difftool –tool-help")]),t._v(" 命令来看你的系统支持哪些 "),a("code",[t._v("Git Diff")]),t._v(" 插件")])]),t._v(" "),a("h2",{attrs:{id:"总结-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结-2"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git diff")]),t._v("：查看 尚未暂存的文件 更新了哪些信息\n"),a("ul",[a("li",[t._v("比较工作目录中当前文件和暂存区域快照之间的差异")])])]),t._v(" "),a("li",[a("code",[t._v("git diff –staged")]),t._v(" 或 "),a("code",[t._v("git diff –cached")]),t._v("：查看 "),a("strong",[t._v("已暂存的将要添加到下次提交里的内容")])])]),t._v(" "),a("h2",{attrs:{id:"提交更新-commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#提交更新-commit"}},[t._v("#")]),t._v(" 提交更新（commit）")]),t._v(" "),a("p",[t._v("现在的 "),a("strong",[t._v("暂存区域")]),t._v(" 已经准备妥当可以提交了。 在此之前，请一定要确认还有什么修改过的或新建的文件还没有 git add 过，否则提交的时候不会记录这些还没暂存起来的变化。 这些修改过的文件只保留在本地磁盘。 所以，每次准备提交前，先用 git status 看下，是不是都已暂存起来了， 然后再运行提交命令 "),a("code",[t._v("git commit")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit\n")])])]),a("p",[t._v("这种方式会启动文本编辑器以便输入本次提交的说明。 (默认会启用 "),a("code",[t._v("shell")]),t._v(" 的环境变量 "),a("code",[t._v("$EDITOR")]),t._v(" 所指定的软件，一般都是 "),a("code",[t._v("vim")]),t._v(" 或 "),a("code",[t._v("emacs")]),t._v("。当然也可以按照 起步 介绍的方式，使用 "),a("code",[t._v("git config –global core.editor")]),t._v(" 命令设定你喜欢的编辑软件。）")]),t._v(" "),a("p",[t._v("编辑器会显示类似下面的文本信息（本例选用 "),a("code",[t._v("Vim")]),t._v(" 的屏显方式展示）：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Please enter the commit message for your changes. Lines starting")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# with '#' will be ignored, and an empty message aborts the commit.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# On branch master")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Changes to be committed:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#\tnew file:   README")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#\tmodified:   CONTRIBUTING.md")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#")]),t._v("\n~\n~\n~\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('".git/COMMIT_EDITMSG"')]),t._v(" 9L, 283C\n")])])]),a("p",[t._v("可以看到，默认的提交消息包含最后一次运行 "),a("code",[t._v("git status")]),t._v("的输出，放在注释行里，另外开头还有一空行，供你输入提交说明。 你完全可以去掉这些注释行，不过留着也没关系，多少能帮你回想起这次更新的内容有哪些。 (如果想要更详细的对修改了哪些内容的提示，可以用 -v 选项，这会将你所做的改变的 diff 输出放到编辑器中从而使你知道本次提交具体做了哪些修改。） "),a("strong",[t._v("退出编辑器时，Git 会丢掉注释行，用你输入提交附带信息生成一次提交。")])]),t._v(" "),a("p",[t._v("另外，你也可以在 "),a("strong",[t._v("commit 命令后添加 -m 选项")]),t._v("，"),a("strong",[t._v("将提交信息与命令放在同一行")]),t._v("，如下所示：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Story 182: Fix benchmarks for speed"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [master 463dc4f] Story 182: Fix benchmarks for speed")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  2 files changed, 2 insertions(+)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  create mode 100644 README")]),t._v("\n")])])]),a("p",[t._v("好，现在你已经创建了第一个提交！ 可以看到，提交后它会告诉你：")]),t._v(" "),a("ul",[a("li",[t._v("当前是在哪个分支（master）提交的")]),t._v(" "),a("li",[t._v("本次提交的完整 SHA-1 校验和是什么（463dc4f）")]),t._v(" "),a("li",[t._v("以及在本次提交中，有多少文件修订过，多少行添加和删改过。")])]),t._v(" "),a("p",[a("strong",[t._v("请记住")]),t._v("，提交时记录的是放在暂存区域的快照。 任何还未暂存的仍然保持已修改状态，可以在下次提交时纳入版本管理。 每一次运行提交操作，都是对你项目作一次快照，以后可以回到这个状态，或者进行比较。")]),t._v(" "),a("h2",{attrs:{id:"跳过使用暂存区域-a"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跳过使用暂存区域-a"}},[t._v("#")]),t._v(" 跳过使用暂存区域 （-a）")]),t._v(" "),a("p",[t._v("尽管使用暂存区域的方式可以精心准备要提交的细节，但有时候这么做略显繁琐。 Git 提供了一个跳过使用暂存区域的方式， 只要在提交的时候，给 "),a("code",[t._v("git commit")]),t._v(" 加上 "),a("code",[t._v("-a")]),t._v(" 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 "),a("code",[t._v("git add")]),t._v(" 步骤：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# On branch master")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Changes not staged for commit:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#   (use "git add <file>..." to update what will be committed)')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#   (use "git checkout -- <file>..." to discard changes in working directory)')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     modified:   CONTRIBUTING.md")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# no changes added to commit (use "git add" and/or "git commit -a")')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -a 跳过 add，-m 以命令行方式填写提交信息")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -a -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'added new benchmarks'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# [master 83e38c7] added new benchmarks")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  1 file changed, 5 insertions(+), 0 deletions(-)")]),t._v("\n")])])]),a("p",[t._v("看到了吗？提交之前不再需要 "),a("code",[t._v("git add")]),t._v(" 文件 CONTRIBUTING.md 了。")]),t._v(" "),a("h2",{attrs:{id:"总结-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结-3"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git commit")]),t._v(" 会将暂存区的文件提交\n"),a("ul",[a("li",[t._v("不加任何参数的命令，会触发编辑器弹出，需要输入提交信息后，保存该文件，才会提交")])])]),t._v(" "),a("li",[a("code",[t._v("-m")]),t._v("：以命令行方式，直接携带提交信息提交")]),t._v(" "),a("li",[a("code",[t._v("-a")]),t._v("：跳过 "),a("code",[t._v("git add")]),t._v(" 命令，自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 "),a("code",[t._v("git add")]),t._v(" 步骤")])]),t._v(" "),a("h2",{attrs:{id:"移除文件-rm"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#移除文件-rm"}},[t._v("#")]),t._v(" 移除文件(rm)")]),t._v(" "),a("p",[t._v("要从 Git 中移除某个文件，就必须要从 "),a("strong",[t._v("已跟踪文件清单中移除")]),t._v("（确切地说，是从 "),a("strong",[t._v("暂存区域移除")]),t._v("），然后提交。 可以用 "),a("code",[t._v("git rm")]),t._v(" 命令完成此项工作，并连带从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。")]),t._v(" "),a("p",[t._v("如果只是简单地 "),a("strong",[t._v("从工作目录中手工删除文件")]),t._v("，运行 "),a("code",[t._v("git status")]),t._v(" 时就会在 "),a("code",[t._v("Changes not staged for commit")]),t._v(" 部分（也就是 未暂存清单）看到：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" PROJECTS.md\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# On branch master")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Your branch is up-to-date with 'origin/master'.")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Changes not staged for commit:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#   (use "git add/rm <file>..." to update what will be committed)')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#   (use "git checkout -- <file>..." to discard changes in working directory)')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#         deleted:    PROJECTS.md")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('# no changes added to commit (use "git add" and/or "git commit -a")')]),t._v("\n")])])]),a("p",[t._v("然后再运行 "),a("code",[t._v("git rm")]),t._v(" 记录此次移除文件的操作：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" PROJECTS.md\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# rm 'PROJECTS.md'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# $ git status")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# On branch master")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Changes to be committed:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#   (use "git reset HEAD <file>..." to unstage)')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     deleted:    PROJECTS.md")]),t._v("\n")])])]),a("p",[t._v("下一次提交时，该文件就不再纳入版本管理了。 如果 "),a("strong",[t._v("删除之前修改过并且已经放到暂存区域的话")]),t._v("，则 "),a("strong",[t._v("必须要用强制删除选项 -f")]),t._v("（译注：即 force 的首字母）。 这是一种安全特性，用于防止误删还没有添加到快照的数据，这样的数据不能被 Git 恢复。")]),t._v(" "),a("p",[t._v("另外一种情况是，我们想 把文件从 "),a("strong",[t._v("Git 仓库中删除（亦即从暂存区域移除）")]),t._v("，"),a("strong",[t._v("但仍然希望保留在当前工作目录中")]),t._v("。 换句话说，"),a("strong",[t._v("你想让文件保留在磁盘，但是并不想让 Git 继续跟踪。")]),t._v(" 当你忘记添加 "),a("code",[t._v(".gitignore")]),t._v("文件，不小心把一个很大的日志文件或一堆 .a 这样的编译生成文件添加到暂存区时，这一做法尤其有用。 为达到这一目的，使用 "),a("code",[t._v("--cached")]),t._v(" 选项：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" --cached README\n")])])]),a("p",[a("code",[t._v("git rm")]),t._v(" 命令后面可以列出文件或者目录的名字，也可以使用 "),a("code",[t._v("glob")]),t._v(" 模式。 比方说：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" log/"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("*.log\n")])])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("注意到星号 "),a("code",[t._v("*")]),t._v(" 之前的反斜杠 "),a("code",[t._v("\\")]),t._v("， 因为 Git 有它自己的文件模式扩展匹配方式，所以我们不用 "),a("code",[t._v("shell")]),t._v(" 来帮忙展开。 此命令删除 "),a("code",[t._v("log/")]),t._v(" 目录下扩展名为 "),a("code",[t._v(".log")]),t._v(" 的所有文件。 类似的比如：")])]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("*~\n")])])]),a("p",[t._v("该命令为删除以 ~ 结尾的所有文件。")]),t._v(" "),a("h2",{attrs:{id:"总结-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结-4"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("git rm {path}")]),t._v(" 移除对此文件的跟踪（确切地说，是从 暂存区域移除），并且从磁盘上删除该文件\n"),a("ul",[a("li",[t._v("注意：删除之前修改过且已经放到暂存区的话，不能直接删除。可使用 "),a("code",[t._v("-f")]),t._v(" 或则 "),a("code",[t._v("--cached")])])])]),t._v(" "),a("li",[a("code",[t._v("-f")]),t._v("：强制删除")]),t._v(" "),a("li",[a("code",[t._v("--cached")]),t._v("：仅移除对此文件的跟踪")])]),t._v(" "),a("h2",{attrs:{id:"移动文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#移动文件"}},[t._v("#")]),t._v(" 移动文件")]),t._v(" "),a("p",[t._v("不像其它的 VCS 系统，Git 并不显式跟踪文件移动操作。 如果在 Git 中 "),a("strong",[t._v("重命名了某个文件")]),t._v("，仓库中存储的元数据并 "),a("strong",[t._v("不会体现出这是一次改名操作")]),t._v("。 不过 Git 非常聪明，它会推断出究竟发生了什么，至于具体是如何做到的，我们稍后再谈。")]),t._v(" "),a("p",[t._v("既然如此，当你看到 Git 的 mv 命令时一定会困惑不已。 要在 Git 中对文件改名，可以这么做：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mv")]),t._v(" file_from file_to\n")])])]),a("p",[t._v("它会恰如预期般正常工作。 实际上，即便此时查看状态信息，也会明白无误地看到关于重命名操作的说明：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mv")]),t._v(" README.md README\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# On branch master")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Changes to be committed:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('#   (use "git reset HEAD <file>..." to unstage)')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#     renamed:    README.md -> README")]),t._v("\n")])])]),a("p",[t._v("其实，运行 "),a("code",[t._v("git mv")]),t._v(" 就相当于运行了下面三条命令：")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mv")]),t._v(" README.md README\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" README.md\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" README\n")])])]),a("p",[t._v("如此分开操作，Git 也会意识到这是一次改名，所以不管何种方式结果都一样。 两者唯一的区别是，mv 是一条命令而另一种方式需要三条命令，直接用 "),a("code",[t._v("git mv")]),t._v(" 轻便得多。 不过有时候用其他工具批处理改名的话，要记得在提交前删除老的文件名，再添加新的文件名。")])])}),[],!1,null,null,null);s.default=n.exports}}]);