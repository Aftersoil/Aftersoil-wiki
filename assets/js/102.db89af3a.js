(window.webpackJsonp=window.webpackJsonp||[]).push([[102],{454:function(n,a,t){"use strict";t.r(a);var e=t(22),s=Object(e.a)({},(function(){var n=this,a=n.$createElement,t=n._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"dom-and-bom"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dom-and-bom"}},[n._v("#")]),n._v(" DOM and BOM")]),n._v(" "),t("h2",{attrs:{id:"dom"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dom"}},[n._v("#")]),n._v(" Dom")]),n._v(" "),t("h2",{attrs:{id:"什么是-dom"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-dom"}},[n._v("#")]),n._v(" 什么是 DOM:")]),n._v(" "),t("p",[n._v("DOM: 专门操作网页内容的一套函数和对象")]),n._v(" "),t("p",[n._v("DOM 还是一个标准 由 W3C 制定")]),n._v(" "),t("h2",{attrs:{id:"为什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么"}},[n._v("#")]),n._v(" 为什么：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("广义 JS = ECMAScript + DOM + BOM \n核心语法: 操作网页内容  访问浏览器软件\n\n要想操作网页内容 为页面添加交互效果 其实只能用DOM 函数和对象 \n")])])]),t("p",[n._v("问题：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("    早起DOM没有标准\n")])])]),t("p",[n._v("解决：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("     W3C制定了统一的DOM函数和对象的标准 几乎所有浏览器 100%兼容\n    特例：IE8\n")])])]),t("p",[n._v("何时:\n只要操作网页内容 为网页添加交互行为 只能用DOM")]),n._v(" "),t("p",[n._v("包括:5件事: 增删改查  事件绑定")]),n._v(" "),t("h2",{attrs:{id:"dom树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dom树"}},[n._v("#")]),n._v(" DOM树")]),n._v(" "),t("p",[n._v("什么是:\n在内存中 集中保存一个网页的所有内容的树形结构")]),n._v(" "),t("p",[n._v("为什么:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("    树形结构是最直观的保存上下级包含关系的数据结构。而网页中Html标签 刚好也是父子级嵌套的上下级包含关系。在内存中 都是在一个棵树型结构上的。\n")])])]),t("p",[n._v("如何：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("    1. 当浏览器读取到一个html文件时 会先在内存中创建一个document对象，作为整个树的根对象\n")])])]),t("p",[n._v("​"),t("br"),n._v("\n2. 开始扫描html中每个元素 文本等内容 没扫描到一项内容 就在 document下对应位置创建一个节点(node)对象。")]),n._v(" "),t("h2",{attrs:{id:"查找元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查找元素"}},[n._v("#")]),n._v(" 查找元素")]),n._v(" "),t("p",[n._v("不需要查找 就可直接获得:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("document.doucmentElement  <html>\ndocument.head             <head>\ndocument.body             <body>\n")])])]),t("p",[n._v("​")]),n._v(" "),t("h1",{attrs:{id:"按节点间-关系查找"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#按节点间-关系查找"}},[n._v("#")]),n._v(" 按节点间 关系查找")]),n._v(" "),t("p",[n._v("树上的每个节点都是不孤立存在的。 都和上下左右的节点之间各种各样的关系 可相互访问到")]),n._v(" "),t("h2",{attrs:{id:"包括"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#包括"}},[n._v("#")]),n._v(" 包括：")]),n._v(" "),t("p",[n._v("节点树：")]),n._v(" "),t("p",[n._v("包含所有节点内容的完整结构")]),n._v(" "),t("p",[n._v("2大类关系")]),n._v(" "),t("h2",{attrs:{id:"父子关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#父子关系"}},[n._v("#")]),n._v(" 父子关系")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("        节点.parentNode 获得当前节点的父节点\n        \n        节点.childNodes 获得当前父节点下的所有直接子节点的集合\n        \n            强调:childNodes返回的是一个类数组对象 今后称为集合。 \n        \n        父节点.firstChild获得父节点下的第一个直接子节点。\n        \n        父节点.lastChild获得父节点下的最后一个直接子节点。\n")])])]),t("p",[n._v("​")]),n._v(" "),t("h2",{attrs:{id:"兄弟关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#兄弟关系"}},[n._v("#")]),n._v(" 兄弟关系")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("    节点.previousSibling 获得当前节点平级的前一个相邻的兄弟节点\n            \n    节点.nextSibling  当前节点平级下一个相邻的兄弟节点\n")])])]),t("p",[n._v("​"),t("br"),n._v("\n问题:\n​"),t("br"),n._v("\n同时包含看不见的换行和空字符,也是节点对象 严重干扰查找")]),n._v(" "),t("p",[n._v("​"),t("br"),n._v("\n解决:")]),n._v(" "),t("h2",{attrs:{id:"元素树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#元素树"}},[n._v("#")]),n._v(" 元素树")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("   元素树:仅包含元素节点的树型结构。\n")])])]),t("p",[n._v("说明:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("元素树不是一棵新树,而是原来节点树中添加了指向元素节点的新属性而形成的一个一棵子数结构。\n")])])]),t("p",[n._v("2 大类关系")]),n._v(" "),t("p",[n._v("父子关系")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("    元素.parentElement 获得当前元素的父元素\n    说明：也可以用parentNode\n   \n    父元素.children 获得当前父元素下的所有直接子元素的集合\n        强调:children返回的是一个类数组对象 今后称为集合。 \n   \n    父元素.firstElementChild获得父节点下的第一个直接子元素。\n   \n    父元素.lastElementChild获得父节点下的最后一个直接子元素。\n")])])]),t("p",[n._v("兄弟关系")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("元素.previousElementSibling 获得当前元素平级的前\n一个相邻的兄弟元素\n\n元素.nextElementSibling  当前元素平级下一个相邻的兄弟元素\n")])])]),t("p",[n._v("​")]),n._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[n._v("#")]),n._v(" 总结：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("今后只要按节点之间关系查找 都用元素树的属性代替节点树的旧属性。\n")])])]),t("p",[n._v("何时：")]),n._v(" "),t("p",[n._v("今后只要已经获得一个节点对象,找周围附近的节点时。就用节点关系查找")]),n._v(" "),t("h1",{attrs:{id:"笔试"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#笔试"}},[n._v("#")]),n._v(" 笔试:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("手写背过 定义一个函数 遍历一个指定的父元素下的所有后代元素\n\n1.定义一个函数 仅遍历直接子元素 \n\n2.如果当前子元素有更下级直接子元素 则对当前子元素继续调用当前函数 查找子元素的直接子元素\n")])])]),t("p",[n._v("​")]),n._v(" "),t("h1",{attrs:{id:"按照html特征查找"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#按照html特征查找"}},[n._v("#")]),n._v(" 按照HTML特征查找")]),n._v(" "),t("p",[n._v("四种")]),n._v(" "),t("ol",[t("li",[t("p",[n._v("按id属性查找")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('var 元素 = document.getElementById("id");\n按整个页面查找id为指定名称的一个元素 \n返回值 如果找到 返回一个元素对象\n没有找到 返回null\n强调 只能用document调用 不能随意在元素上调用 \n')])])])]),n._v(" "),t("li",[t("p",[n._v("按标签查找")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v(' var 集合 = 父元素.document.getElementsByTagName("标签名");\n 在指定的父元素下查找所有标签名为指定标签名的后代元素\n 返回值 如果找到 返回多个元素组成的集合\n         如果没找到 返回空集合:[].length=0\n 1. 可在任意父元素下查找 通常指定某个父元素下查找后代 是为了减少查找范围,提高查找效率。\n 2. 不止查找直接子元素而是在所有后代中查找\n     比如：nav.getElementBy \n')])])])]),n._v(" "),t("li",[t("p",[n._v("按class查找")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v(' var 集合 = 父元素.getElementByClassName("类名");\n 在指定父元素内 查找class属性中包含指定类名所有元素\n 返回值 如果找到 返回多个元素组成的集合\n         如果没找到 返回空集合:[].length=0\n 强调: \n     1.可限制在任意父元素内查找 减少查找范围。\n     2. 不仅查找直接子元素 且在所有后代中查找\n     3. 如果一个元素同时被多个class修饰 则使用其中一个class 就可以\n         找到该元素  无需所有Class都满足\n')])])])]),n._v(" "),t("li",[t("p",[n._v("按name属性来查找")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('   var 集合 = document.getElementsByName("name");\n   在整个网页中查找name属性值为指定name名的元素\n   返回值: 如果找到 返回多个元素组成的集合\n           如果没有找到 返回空集合:[].length=0\n       强调\n           只能用documen调用 不能用随意一个父元素调用\n       何时： \n           在表单中查找表单元素时\n   问题: 所有返回集合的查找函数 在任何情况下都返回一个集合\n   即使只找到一个元素 也放在一个集合中返回\n   集合\n')])])])])]),n._v(" "),t("h2",{attrs:{id:"用选择器当条件查找元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用选择器当条件查找元素"}},[n._v("#")]),n._v(" 用选择器当条件查找元素：")]),n._v(" "),t("ol",[t("li",[t("p",[n._v("只查找一个符合条件的元素")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v(' var 元素 = 父元素.querySelector("任意复杂选择器")\n 在指定的父元素下查找符合选择器要求的一个元素\n \n 返回值: 如果找到 返回一个元素对象\n     如果没找到 返回-1\n')])])])]),n._v(" "),t("li",[t("p",[n._v("查找多个符合条件的元素")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("var 集合=父元素.querySelectAll()\n强调: 在指定的父元素下查找符合选择器要求的多个元素\n\n返回值: 如果找到 返回一个元素对象\n    如果没找到 返回空集合:[].length=0;\n\n强调:\n\t1. 可以任意父元素调用来限制查找的范围\n    2.()中的选择器参数 不用每次都写完整 只要以.前父元素为起点开始写就行！\n")])])])])]),n._v(" "),t("div",{staticClass:"language-html extra-class"},[t("pre",{pre:!0,attrs:{class:"language-html"}},[t("code",[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("<")]),n._v("ul")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v('ul.querySelectAll("li li");\n    '),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("<")]),n._v("li")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v("\n        "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("<")]),n._v("ul")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v("\n            "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("<")]),n._v("li")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v("\n            "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("<")]),n._v("li")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v("\n            "),t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token tag"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("<")]),n._v("li")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(">")])]),n._v("\n\n                3. 不仅限于查找直接子元素 且在所有的后代中查找符合条件的 \n")])])]),t("h1",{attrs:{id:"总结-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-2"}},[n._v("#")]),n._v(" 总结:")]),n._v(" "),t("ol",[t("li",[t("p",[n._v("不需要查找就可直接获得")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("             document.doucmentElement  <html>\n             document.head             <head>\n             document.body             <body>\n")])])])]),n._v(" "),t("li",[t("p",[n._v("属性")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v(' 1. 父子关系\n 元素.parentElement     \n 父元素.children\n 父元素.firstElementChild\n 父元素.lastElementChild\n \n 2. 兄弟关系\n \n 元素.previousElementSibling \n 元素.nextElementSibling \n\n 3.  按照HTML特征查找\n \n     var 元素 = document.getElementById("id");\n     var 集合 = 父元素.getElementsByTagName("标签名");\n     var 集合 = 父元素.getElementByClassName("class名"); var 集合 = document.getElementsByName("name名");\n\n 4.  按选择器查找\n \n     var 元素 = 父元素.querySelector("任意")\n     var 集合 = 父元素. querySelectorAll("元素")      \n')])])])])]),n._v(" "),t("p",[n._v("DOM 优化之一:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("    如果只用一个条件就可以找到想要的元素时\n    尽量使用  getElementByxxx()函数查找 —— —— 效率高\n    只有查找条件复杂时 才按选择器查找 —— —— 效率低  \n")])])]),t("p",[n._v("作业:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("1. 页面上完全相同多个按钮 不确定和数量 \n    点那个按钮 弹出自己是第几个 \n")])])]),t("h1",{attrs:{id:"修改"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修改"}},[n._v("#")]),n._v(" 修改")]),n._v(" "),t("h1",{attrs:{id:"添加-删除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#添加-删除"}},[n._v("#")]),n._v(" 添加/删除")]),n._v(" "),t("h2",{attrs:{id:"修改-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修改-2"}},[n._v("#")]),n._v(" 修改:")]),n._v(" "),t("p",[n._v("3 样:")]),n._v(" "),t("ol",[t("li",[t("p",[n._v("内容")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v(" 1.获取或修改原始的HTML片段 元素.innerHTML\n 2. 获取或修改纯文本内容: 元素.textContent\n     以上两个获得的都是双标记 开始标记和结束标记之间的内容\n     问题：表单元素是单标记,没有结束标记 所以也就没有innerHTML 和 textContent\n 3. 获取或设置表单元素的内容:表单元素.value\n")])])])]),n._v(" "),t("li",[t("p",[n._v("属性")])]),n._v(" "),t("li",[t("p",[n._v("HTML标准属性")])])]),n._v(" "),t("p",[n._v("什么是")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("    HTML标准中规定的那些字符串类型的属性 比如 id class title value name  herf...\n")])])]),t("h1",{attrs:{id:"获取或修改html标准属性-2-种方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#获取或修改html标准属性-2-种方式"}},[n._v("#")]),n._v(" 获取或修改HTML标准属性 2 种方式")]),n._v(" "),t("h2",{attrs:{id:"早期核心dom函数4个"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#早期核心dom函数4个"}},[n._v("#")]),n._v(" 早期核心DOM函数4个")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('    元素.getAttribute("属性名") 获取属性值\n\n    元素.setAttribute("属性名","新值") 修改属性值\n\n    var bool = 元素.hasAttribute("属性名")判断元素是否包含该属性\n    \n    元素.removeAttribute("属性名")移除元素上的指定元素\n')])])]),t("p",[n._v("​")]),n._v(" "),t("h2",{attrs:{id:"后来的html-dom-函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#后来的html-dom-函数"}},[n._v("#")]),n._v(" 后来的HTML DOM 函数:")]),n._v(" "),t("h2",{attrs:{id:"什么是htmldom"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是htmldom"}},[n._v("#")]),n._v(" 什么是HTMLDOM:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('    是在旧版基础上 对部分常用函数和常用对象提供的简化版函数。\n    \n    做的第一个简化 每个元素对象中都提前预置好了所有HTML标准属性 只不过  值暂时为"".\n        今后在操作Html标准属性时 用 元素.元素名\n')])])]),t("p",[n._v("​"),t("br"),n._v("\n获取属性值: 元素.属性名")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("    修改属性值: 元素.属性名=值\n        强调 只要修改标准属性 值必须是字符串，如果不是字符串 DOM会自动转为字符串 \n")])])]),t("p",[n._v("​"),t("br"),n._v('\n判断是否包含指定属性:元素.属性名!="",说明包含  因为所有标准属性的默认值是""')]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('    移除属性 元素.元素名="";\n        只要把元素的属性值改为空字符串 则当前属性失效\n')])])]),t("p",[n._v("特例 html中")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('    <元素 class="类名" JS中不能用.Class 因为class 是js的关键词  \n')])])]),t("p",[n._v("凡是 操作html 中的class属性 一律更名为ClassName")]),n._v(" "),t("p",[n._v("Js中操作className等效于操作Html 中的class属性class")]),n._v(" "),t("p",[n._v("问题 以上函数 只能操作字符串类型的HTML标准属性 无法操作bool类型的HTML属性\n2. 状态属性")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("    什么是: HTML 标准中规定 值为 bool类型的三大属性 disabld selected  checked multiple...\n        \n    特征 所有状态属性在HTML中使用时 都不带=和属性值 加上 就起作用 去掉就失去作用\n")])])]),t("p",[n._v("​"),t("br"),n._v("\n如何操作:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("    不能用核心DOM 4个函数\n    只能用 . 访问:\n            比如: \n                禁用一个按钮: btn.disabled=true\n                    相当于:\n                        <button disabled>....\n                启用一个按钮: btn.disabled=false\n                \n                选中一个按钮: btn.checked\n                        cnb.checked=true;\n                    \n            补: CSS 中有一组状态伪类\n                :disabled  :checked :selected  \n               \n                专门用于选中处于某种状态的伪类:\n                比如: input:checked 选择的是被选中的input元素\n                \n                button:disabld 选择是被禁用的\n                按钮\n")])])]),t("h2",{attrs:{id:"自定义扩展属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义扩展属性"}},[n._v("#")]),n._v(" 自定义扩展属性")]),n._v(" "),t("p",[n._v("什么是自定义扩展属性:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('html 标准中没有规定的 程序员自发添加的属性\n\n何时: 2 个经典用途\n   \n    1. 在客户端临时缓存数据\n        比如: data-target="id 值";\n   \n    2. 代替其他选择器 来选择触发事件的元素 为元素绑定事件。\n   \n比如: data-toggle = "dropdown";  \n\n        如何:\n            1. 为元素添加自定义扩展属性:\n                行业规范:<元素  data-自定义属性名="值">\n\n            2. 用自定义扩展属性作为查询条件 只能用属性选择器:\n                [data-属性名=值]\n\n            3. 获取或修改自定义属性的值:\n\n                不能用.访问 自定义扩展属性:\n\n                    因为自定义扩展属性 是程序员在html标准之外, 后天添加的自定义属性 则HTMLDOM元素对象中就不包含这些自定义扩展属性\n\n                1. 可以用核心DOM    (没有兼容性问题)\n                \n                元素.getAttribute("data-属性名");\n                \n                元素.setAttribute("data-属性名");\n')])])]),t("p",[n._v("​"),t("br"),n._v("\n为什么:getAttribute()每次都去HTML代码中查找属性")]),n._v(" "),t("p",[n._v("HTML5标准规定:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("        可以元素 .属性名\n        其中   dataset 可以自动收集页面上\n        所有 data-开头的自定义扩展属性 这就是为什么自定义扩展属性名习惯上都要带data-前缀的原因！\n")])])]),t("ol",{attrs:{start:"3"}},[t("li",[t("p",[n._v("自定义扩展属性:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('定义:<元素 data-自定义属性="值"\n获取或修改:\n\n元素.getAttribute("data-属性名")\n\n元素.getAttribute("data-属性名","值")\n')])])])])]),n._v(" "),t("p",[n._v("HTML5: 元素.dataset.属性名")]),n._v(" "),t("p",[n._v("​")]),n._v(" "),t("h1",{attrs:{id:"样式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#样式"}},[n._v("#")]),n._v(" 样式:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('修改内联样式\n        元素.style.backgroundColor="red";\n强调 - 换驼峰明名 \n\n问题: 元素.style仅包含内联样式 不包含样式表的样式 所以如果用.style.css属性 也只能获得内联样式\n,无法获得样式表中定义的样式\n')])])]),t("p",[n._v("​"),t("br"),n._v("\n解决: 获得计算后的样式\n什么是计算后的样式: 最终应用到这个元素上的所有样式的集合")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("何时: 今后只要获取样式 都要获取计算后的样式\n\n如何: 2 步:\n    \n    1. 先获得计算后的样式对象\n    \n        var style = getComputedStyle(元素);\n    \n        获得指定元素计算后的完整样式对象\n    \n        强调:getComputedStyle是内置的全局函数 可直接使用！\n    \n        返回值 是一个包含所有css属性值的巨大的对象 \n    \n    2. 才是从样式对象中提取想要的css属性:\n        \n        var 属性值=style.css属性\n        强调: 计算后的样式 都是只读的 \n            因为样式的来源不确定 不确定有多少元素正在共享该属性 所以不允许\n            擅自修改\n")])])]),t("h1",{attrs:{id:"总结-想修改一个元素的css属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-想修改一个元素的css属性"}},[n._v("#")]),n._v(" 总结： 想修改一个元素的css属性")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("        元素.style.css属性=值\n        想获取一个元素的css属性\n        getComputedStyle(元素).css属性 \n")])])]),t("h1",{attrs:{id:"总结-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结-3"}},[n._v("#")]),n._v(" 总结:")]),n._v(" "),t("ol",[t("li",[t("p",[n._v("内容")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v(" 1. 原始html片段: .innerHTML \n 2. 纯文本:.textContent\n 3. 表单元素内容:.value\n")])])])]),n._v(" "),t("li",[t("p",[n._v("属性:")]),n._v(" "),t("p",[n._v("1.html 标准属性:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("     核心DOM：.getAttribute()\n             .setAttribute()\n             .hasAttribute()\n             .removeAttribute()\n     HTML DOM: 也可用.改 \n          1. 状态属性: 只能用.改\n          2. 自定义扩展属性:\n")])])])])]),n._v(" "),t("p",[n._v("3 .样式:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('        1. 修改内联样式 元素.style.css 属性值=""; \n        \n        2. 获取:getComputedStyle(元素).css属性     \n')])])]),t("p",[n._v("问题:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("修改样式时,style.css 属性一句话只能改一个css属性 而网页中一个效果的变化 \n\n可能同时涉及多个css属性 如果用style.css属性=值 修改 代码会很繁琐 而且加样式时\n繁琐一次 去掉样式时同样繁琐！\n")])])]),t("h2",{attrs:{id:"解决"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决"}},[n._v("#")]),n._v(" 解决:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("    当批量修改样式时 用className修改是最划算的！\n")])])]),t("p",[n._v("​")]),n._v(" "),t("h1",{attrs:{id:"添加-删除-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#添加-删除-2"}},[n._v("#")]),n._v(" 添加/删除")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("HTML DOM\nBOM \n")])])]),t("h2",{attrs:{id:"添加-删除-3"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#添加-删除-3"}},[n._v("#")]),n._v(" 添加/删除")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('    1.添加:3步\n            \n    1. 创建一空元素\n        \n        var a = document.cerateElement("a");\n        强调: 只能用document调用\n        \n        问题: <a></a>\n        \n        2. 为空元素添加属性和内容\n          \n            a.herf = "http://tmooc.cn";\n            a.innerHTML = "go to tmooc" \n          \n            问题: 网页上依然看不见a\n          \n            因为: 网页的排版和绘制,都是DOM树为依据。而新\n          \n            依据 而新创建的元素对象 还没有加载到DOM树上 排版引擎和绘图引擎\n            不知道多了新元素 自然还不会画到页面上\n    \n    3. 将空元素挂载到DOM树\n    \n                3种:\n                    \n                    1.追加一个父元素下的所有子元素的末尾\n                        父元素.appendChild("新元素")\n                                追加\n                    \n                    2.插入一个父元素下的某个子元素之前  \n                        父元素.insertBefore("新元素,现有元素")\n')])])]),t("p",[n._v("​"),t("br"),n._v('\n3.替换父元素下一个现有的旧元素\n父元素.replaceChild("新元素,旧元素");')]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("                强调: 将新元素挂载到DOM树上 都要先找到它的父元素,由父元素调用\n                函数 将新元素添加到自己的子元素中\n   \n    2.删除  \n          父元素.removeChild(子元素)\n")])])]),t("h1",{attrs:{id:"html-dom-常用对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#html-dom-常用对象"}},[n._v("#")]),n._v(" HTML DOM 常用对象")]),n._v(" "),t("p",[n._v("HTML DOM 对常用的比较复杂的元素,提供了一些简写的函数和属性")]),n._v(" "),t("h2",{attrs:{id:"_1-image-对象-代表页面上一个元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-image-对象-代表页面上一个元素"}},[n._v("#")]),n._v(" 1. Image 对象: 代表页面上一个"),t("img"),n._v("元素")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('    唯一的简化: 创建<img>元素：var img = new Image()   \n        代替: var img = document.cerateElement("img");\n        强调: new Image() 只创建<img>元素 不负责挂载 还需要多一句\n        appendChild()....将<img>元素挂载到DOM树上\n')])])]),t("h2",{attrs:{id:"_2-select-option"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-select-option"}},[n._v("#")]),n._v(" 2. Select/Option")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("        Select 对象: 代表页面上一个<select>元素\n    \n    属性 \n    \n        1. selecredindex 获得当前选中的option在整个select下的\n        位置 下标。\n    \n        .value 获得当前选中的option的value属性值\n        如果option上没有value属性 则返回option的内容文本代替  \n    \n        .options 获得当前select下所有option对象的集合\n    \n        .options.length 获得当前select下共有几个option 对象\n    \n        .length == .option.length 也可以获得当前select下所有option对象\n    \n    方法: \n        \n        .add(option)向select下添加一个option对象\n        \n        .remove(i)移除 i 位置的 option对象。\n")])])]),t("h2",{attrs:{id:"option-对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#option-对象"}},[n._v("#")]),n._v(" Option 对象:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('    表页面上一个<option>元素\n\n    唯一简化: 创建<option>元素:\n        \n        var  opt = new Option(内容文本,value 属性值); \n        相当于:\n        \n            var opt = document.cerateElement("option");\n        \n            opt.innerHTML="文本内容";\n        \n            opt.value = "属性值"\n')])])]),t("p",[n._v("​"),t("br"),n._v("\n​")]),n._v(" "),t("h2",{attrs:{id:"_4-table"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-table"}},[n._v("#")]),n._v(" 4. Table/...")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("    Table 从上到下完整结构4级: table 行分组  tr td\n")])])]),t("p",[n._v("Table 对象采用逐级管理的方式")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('Table管行分组:\n    \n    添加行分组:\n        var thead = table.createTHead(); \n            一句话定两句话\n            1 var thead = document.cerateElement("thead");\n            2 table.appendChild(thead) \n        \n        var tbody = table.createTBody();\n        var tfoot = table.createTFoot();    \n    \n    删除行分组:\n        \n        table.deleteTHead();\n        table.deleteTFoot();\n        \n        获取行分组:\n            table.tHead;\n            table.tFoot;\n            table.tBodies[0]\n                |-tBodies:\n                    [\n                                \n                            |-tbody \n                            |-tbody\n                    ]\n        因为HTML中规定 一个table 下可以有多个tbody！ 所以tbody对象都是放在\n        table对象的tbodies集合中管理的  并不是直接隶属于table。\n\n\n\n\n行分组管着行:\n    \n    添加行: var tr = 行分组.insertRow(i)\n        在当前行分组内, i 位置 添加一个新行\n        等于以前两句话:\n    \n            var tr = document.cerateElement("tr");\n    \n    行分组.appendChild(tr);\n      \n        强调: 如果i位置已经有行 则现有行向后顺移一行 新行插入才当前i位置\n        固定套路:2个\n        1. 末尾追加一行:\n            var tr = 行分组.insertRow()\n        2. 开头插入一行: \n            var tr = 行分组.insertRow(0) \n    \n    删除行：行分组.deleteRow(i);\n    \n        删除行分组中的i行\n        问题: i 要求必须是当前行在行分组内的相对下标位置。行在行分组内的相对位置\n        只能靠肉眼判断,无法用程序自动获得！\n            \n    其实: 每个行对象tr 都是一个.rowIndex属性 记录了这一行在整个表中\n                的下标位置\n    \n    问题2: 行分组.deleteRow()需要一个行分组的相对下标。\n    tr.rowindex自动\n    \n    获得的是行在整个表中的绝对下标位置。 很有可能错位！ 因为表格中很可能有表头行。 所以 tr.rowIndex不能用在行分组.deleteRow()中\n            \n    解决: 今后只要删除行:\n            \n        table.deleteRow(tr.rowIndex);   \n        \n        因为主语换做table后 deleteRow需要的 刚好是 行在 table 内的相对位置 而tr.rowIndex获得的刚好也是行在table中的位置。 两者就配对儿了\n    \n    获取行：\n        行分组.rows\n        行分组中将所有行对象 都保存在一个rows集合中管理\n')])])]),t("p",[n._v("​"),t("br"),n._v('\n行管着格:\n添加格: var td=tr.insertCell()\n格\n一句话定两句话\nvar td = document.cerateElement("td");')]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("            tr.appendChild(td);\n")])])]),t("p",[n._v("​"),t("br"),n._v("\n固定套路:行末尾追加一格;\nvar td=tr.insertCell()")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("        删除格： tr.deleteCell()\n        \n        获取格: tr.cells[i]\n            tr 将内部所有td 元素对象 都集中保存在cells集合中管理\n")])])]),t("p",[n._v("​")]),n._v(" "),t("h1",{attrs:{id:"补-确认框"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#补-确认框"}},[n._v("#")]),n._v(" 补: 确认框:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('什么是确认框: 有两个选项的对话框\n\n        如何:\n            var  bool = confirm("消息提示")\n                    确定\n\n            如果用户确定 就返回 true \n\n            如果用户点取消 返回false\n')])])]),t("p",[n._v("​")]),n._v(" "),t("h2",{attrs:{id:"_5-form-表单"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-form-表单"}},[n._v("#")]),n._v(" 5. Form/表单")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("Form 对象:\n    Form 对象:\n        获取:  \n        document对象 已将将当前页面上所有from对象收集到了\n        forms数组中。\n        document.forms[i 或 id]\n")])])]),t("p",[n._v("​"),t("br"),n._v("\n属性：.elements 获得表单中所有表单元素对象的集合")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("        强调: .elements中只能获得表单元素\n        .elements.length 可获得表单中表单的个数\n        \n        .length == .elements.length 获得表单中表单元素\n        的个数\n")])])]),t("p",[n._v("​"),t("br"),n._v("\n表单元素对象:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("        获取: 不带name的表单元素\n            form.elements[i 或 id 或 name] \n    \n        有name的表单元素:\n            form.name 名\n    \n        方法: 表单元素.focus()\n                让表单元素自动获得焦点\n")])])]),t("h1",{attrs:{id:"优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优化"}},[n._v("#")]),n._v(" 优化:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("    尽量减少操作DOM树的次数\n    \n    为什么 只要修改一次DOM树 会导致重排重绘\n    如果频繁重排重绘制 会出现闪屏\n")])])]),t("h1",{attrs:{id:"解决-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解决-2"}},[n._v("#")]),n._v(" 解决:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("    1. 如果同时添加父元素和子元素,应该现在内存中将\n    子元素先添加到父元素中 最后再将父元素整体一次\n    性添加到DOM树 ———— 只重排重绘一次！ \n\n    1. 如果父元素已经在页面上了, 要添加多个平级子元素 \n    应该找一个临时的爹: 文档片段对象 先将多个平级子元素 在任何情况下都返回一个集合\n    内存中 添加到文档片段对象中 再将文档片段对象整体一次性添加DOM\n    树上 ———— 也只重排重绘一次\n                    \n    什么是文档片段: 内存中临时保存多个平级子元素的虚拟父元素\n")])])]),t("p",[n._v("​"),t("br"),n._v("\n何时: 只要 父元素已经在页面上了, 要添加多个平级子元素")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("    如何: 3步 \n    1. 创建文档片段\n        var frag = document.createDocumentFragment();\n                            创建   文档     片段 \n")])])]),t("p",[n._v("​"),t("br"),n._v("\n2. 将子元素添加到文档片段中\nfrag 对象是一个虚拟对象,所以 用法和真实父元素完全一样\n比如： frag.appendChild(新元素);")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("    3. 将文档片段对象一次性添加到DOM树\n        \n        真实父元素.appendChild(frag);\n\n    问题: 文档片段会不会成为页面上实际的元素\n    答 不会 文档片段在将子元素添加到DOM树后,就会自动释放 不会成为实际页面元素 \n")])])]),t("p",[n._v("总结:  优化:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('    1. 尽量减少操作DOM树的次数\n    2. 查找：如果只要一个条件就可以找到元素时\n        \n        首先按HTML特征查找:getElementsByXXX\n        如果查找条件复杂时: \n            用选择器查找\n                querySelector()和querySelectorAll()\n    \n    3. 添加删除: \n        \n        如果同时添加父元素和子元素, 应该先将内存中的子元素添加到父元素中\n        ,最后 再将父元素一次性添加到DOM树 \n        如果父元素已经在页面上了,应该先在内存中创建文档片段对象,\n        将所有平级子元素添加到文档片段中 最后在将文档片段一次性添加\n        到父元素上\n\n    4. 修改时: 能一次修改完成的,就不分两句话修改！\n        比如 元素.style.width="200px"\n                元素.style.width="100px"\n        其实： 元素.style.cssText = "width:200px;height:100px";\n')])])]),t("p",[n._v("​")]),n._v(" "),t("h1",{attrs:{id:"bom-browser-object-model"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bom-browser-object-model"}},[n._v("#")]),n._v(" BOM： Browser Object Model")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("什么是: 专门操作或访问浏览器软件的一批函数和对象\n\n何时: 只要想获取浏览器软件的信息 , 或操作浏览器窗口时\n\n如何:\n    包括:\n        1.最大的对象: window\n            3个角色\n                1.代替ECMAScript中的global充当全局作用域对象 \n                    所有我们自己声明的全局变量和全局函数默认都在window中\n               \n                2.包含了所有ECMAScript,DOM 和 BOM 的函数对象 \n                    比如:window.Array window.alert window.document\n                    封装BOM 和 DOM API\n")])])]),t("p",[n._v("​"),t("br"),n._v("\n3.代表着当前正在打开的浏览器窗口\n比如: 获取浏览器窗口的大小")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("                    1. 完整大小 (********)\n                       window.outerWidth \n                       window.outerHeight\n                    \n                    2. 文档显示区大小:\n                        window.innerWidth  (阴影也算)\n                        window.innerHeight\n")])])]),t("h2",{attrs:{id:"打开和关闭窗口"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#打开和关闭窗口"}},[n._v("#")]),n._v(" 打开和关闭窗口")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('1. 打开窗口:4中需求\n    \n    1.在当前窗口打开,可后退:\n    html:<a herf="url"target="_self">\n    js: window.open("url","_self")\n')])])]),t("p",[n._v("​"),t("br"),n._v('\n2.在当前窗口打开,禁止后退:\njs: location.replace("url");')]),n._v(" "),t("p",[n._v("​"),t("br"),n._v('\n3.在新窗口打开,可打开多个:\nhtml:<a herf="url"target="_blank">\njs: window.open("url","_blank")')]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('    1. 在新窗口打开, 只能打开一个: \n    \n        html:<a herf="url"target="自定义窗口名">\n        js: window.open("url","自定义窗口名")\n')])])]),t("p",[n._v("​"),t("br"),n._v("\n原理:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("            1. 在浏览器中 每个窗口都有一个name属性 唯一标识一个窗口\n    \n            2. a 的 target 属性 其实是在新窗口起名字(name属性)\n    \n            3. 浏览器规定:同名的窗口只能开一个! 后打开的同名窗口会覆盖\n            先打开的同名窗口\n            有两预定特殊意义的窗口名:\n    \n                _self: 自动获得当前窗口name给新窗口--新窗口覆盖旧窗口\n    \n                _blank: 空白 不给新窗口指定窗口名 而是靠浏览器随机生成--\n                新窗口名字一定不重复\n\n            后退:保存当前窗口打开后 成功访问过的所有url的数组  history\n")])])]),t("h1",{attrs:{id:"bom"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bom"}},[n._v("#")]),n._v(" BOM")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("window 包含:\n    history  前进后退\n    \n    location 地址栏\n    \n    document 其实就是DOM中的document对象\n    \n    navigator 浏览器配置信息\n    \n    screen  显示设备信息\n    \n    event  事件处理机制\n")])])]),t("h2",{attrs:{id:"history"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#history"}},[n._v("#")]),n._v(" history:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("    什么是: 保存当前窗口打开后 成功访问过得url的\n    \n    历史记录数组\n    \n    何时: 只要用程序自动前进后退 都使用history\n    \n    如何: history.go(n);\n    \n          比如: 前进一步:history.go(1);\n                后退一次:history.go(-1);\n                    有时后退一次不管用 可histroy.go(-2); \n                刷新:history.go(0);\n")])])]),t("h2",{attrs:{id:"location"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#location"}},[n._v("#")]),n._v(" location:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("    什么是: 专门保存地址栏中的地址信息 以及提供跳转操作的方法的对象\n   \n    何时:\n         1.希望获得地址栏中url信息时\n         2. 希望执行一些特殊的跳转操作时\n         \n        如何:\n        \n            1. 获取地址栏里的url信息:\n                location.herf 完整的url\n                location.protocol 协议\n                        .host 主机名+端口号\n                        .hostname 主机名\n                        .port 端口号\n                        .pathname 相对路径\n                        .search 获得?查询字符串以及之后的查询字符\n                        \n                        .hash  获得#锚点地址\n")])])]),t("p",[n._v("​"),t("br"),n._v("\n2. 执行跳转操作")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('               1.在当前窗口打开 可后退:\n           \n                 location.herf="新url"\n                 或location.assign("新url")\n                 或location="新url" \n                 都等效于:window.open("url","_self")\n           \n               2. 单签窗口打开 禁止后退\n            \n                   location.replace("新url")\n            \n               3. 刷新页面2种\n            \n                    1. 普通刷新:优先从浏览器缓存中获取资源,缓存中\n                    过期或没有时 才去服务器重新获取\n                \n                    history.go(0)\n                    location.reload()\n                \n                    F5 \n                \n                    缓存中取\n                    问题: 可能即使刷新后 也无法获得服务器上的新内容\n')])])]),t("p",[n._v("​"),t("br"),n._v("\n2. 强制刷新 始终跳过浏览器缓存 总是从服务器端获取新内容:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("                   location.reload(true);\n                  \n                   问题: 每次都去服务器拿 慢且增大服务器压力！\n\n\nnavigator:\n\n    什么是: 保存浏览器配置信息的对象\n    何时:    获取浏览器配置信息时\n\n    包括:\n\n        1 判断浏览器是否安装某个插件\n            什么是插件: 为浏览器添加新功能的小软件\n\n            如何判断是否安装了某个插件:\n                浏览器中所有已安装的插件信息都保存在navigator 的 plugius集合中。插件名就是插件信息在集合中的下标名\n                可以强行访问插件名下标,如果返回undefined\n                说明未安装\n\n        2 判断浏览器的名称和版本号\n            浏览器名称和版本号都包含在一个navigator的userAgent属性中。\n            但是:userAgent是一个巨大的字符串 我们需要通过字符串查找的方式判断浏览器的名称和版本号\n            如何:\n")])])]),t("h1",{attrs:{id:"事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事件"}},[n._v("#")]),n._v(" 事件:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("什么是: \n        \n    浏览器自动触发的 或用户手动触发的页面内容状态的改变\n\n事件属性:\n    \n    每个元素上都有一批以onXXX开头的事件属性用于提前保存事件处理函数 当事件发生时 浏览器会自动找到该事件属性上绑定的处理函数自动执行。\n\n事件处理函数: 当事件发生时 想要自动执行的函数\n     \n何时: 只要希望事件发生时 能自动执行一项任务\n")])])]),t("p",[n._v("​"),t("br"),n._v("\n如何:\n1.绑定事件处理函数")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('            1 HTML 中:\n                <ANY no 事件名="JS语句";>\n                问题:\n                     不便于维护 和 重用 \n\n            2. js中 用赋值方式绑定:\n\n                  DOM元素.on 事件名= function(){...}; \n\n                    问题: 一个事件属性,只能绑定一个事件处理函数。如果多次绑定处理函数 最后一个可以生效。\n         \n            3. js 中用添加事件监听对象的方式:\n         \n                        添加  事件 监听\n               DOM 元素.addEventListener("事件名",事件处理函数)\n         \n               原理:\n                    1.其实浏览器中有一个事件监听对象队列。\n         \n                    2. 每为一个DOM元素 绑定一个事件处理函数,就会在监听对象队列中添加一个新的监听对象。\n\n                    DOM元素.on事件=function也是事件监听对象的意思,但是 第二次执行=function时 不是新增一个对象 而是找到原监听对象替换\n                    。\n                    DOM元素.addEventlistener是不管当前元素有没有这个事件的处理函数 都增加一个新的监听对象\n\n         3. 当事件发生时 浏览器会遍历整个监听对象的队列,找到符合条件的 监听对象 执行其中处理函数。 \n                    \n        2. 当事件发生时 浏览器自动调用 对应元素上的对应事件处理函数执行\n        \n3.移除事件监听:\n    DOM元素.removeEventListener("事件名",原处理函数对象) \n   \n    强调: 如果一个处理函数可能要被移除 那么在绑定时就不要使用匿名函数 要有有名称的函数进行绑定   \n    \n    btnShoot.removeEventListener("click",shoot2)\n')])])]),t("p",[n._v("​")]),n._v(" "),t("h1",{attrs:{id:"bom-事件模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bom-事件模型"}},[n._v("#")]),n._v(" BOM 事件模型 *********")]),n._v(" "),t("p",[n._v("什么是:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("    从事件发生开始 到所有处理函数触发完,所经历的整个过程。\n")])])]),t("p",[n._v("包括3个阶段")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("            1. 捕获 由外向内,依次记录各级父元素上绑定的处理函数———— 只记录,不执行\n            2. 目标触发: 先触发目标元素上的处理函数\n               目标元素: 最初想点击的元素 \n            3. 冒泡执行: 由内向外 依次触发捕获阶段记录的各级父元素上的处理函数 \n")])])]),t("p",[n._v("事件对象: ******")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("什么是: 当事件发生时 浏览器自动创建的 保存事\n        件信息的对象\n")])])]),t("p",[n._v("​"),t("br"),n._v("\n何时 2种:\n1. 希望获得事件相关的信息时\n2. 如果希望改变事件模型的默认行为时")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("            如何使用: \n                1.不用自己创建! 只要获取即可\n                    事件对象 总是作为处理函数的第一个参数自动传入。 —————— 信任      \n                    //e 形参\n                    当事件发生时:\n                          //  window 创建event对象\n                                             ↓\n                        // DOM 元素.on事件名{event}\n                    DOM.onclick=function(e){\n                       // e 获得window自动创建的event\n                    }\n                2.取消冒泡\n                    e.stopPropagation();\n                      停止  蔓延\n")])])]),t("ol",{attrs:{start:"3"}},[t("li",[t("p",[n._v("事件委托(delegate)/利用冒泡")]),n._v(" "),t("p",[n._v("优化:  尽量减少事件监听的个数\n因为:  浏览器触发事件时采用的是遍历队列的方式。队列中监听对象多，遍历查找的速度就可能慢 事件相应的速度就可能延迟 队列中监听对象 遍历查找速度就可能快 事件响应的速度就快！")]),n._v(" "),t("p",[n._v("如何: 今后只要多个平级子元素都要绑定相同的事件时,\n只要将事件在父元素绑定一次 所有子元素都可以通过冒泡\n原理共享父元素的事件使用!")]),n._v(" "),t("p",[n._v("难题:\n1.每个按钮做的事儿不一样,如何获得实际点击的目标\n元素？")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v(" 错误 this 不能用了\n \n 正确  用e.target代替this\n     e.target 是始终保存目标元素的特殊属性。\n 不随冒泡改变\n 一旦拥有别无所求 \n\n 2. 如何鉴别目标元素是否是想要的\n     凡是执行正式操作之前   添加验证判断是否自己是想要的  e.target.nodeName==BUTTON\n\n\n\n\n 优点 \n         1.无论多个子元素都可共享一个事件处理函数\n         \n         2.即使动态添加的元素也可添加共享事件、\n")])])])])]),n._v(" "),t("h2",{attrs:{id:"阻止默认行为"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#阻止默认行为"}},[n._v("#")]),n._v(" 阻止默认行为")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v(' 什么是: 有些元素身上自带一些默认行为:\n    比如:<a herf="#"> 默认回到顶部\n\n    如何:\n     e.preventDefault();  \n')])])]),t("h2",{attrs:{id:"鼠标位置-3组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#鼠标位置-3组"}},[n._v("#")]),n._v(" 鼠标位置:3组")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("    1. 相对于屏幕左上角的位置:\n        e.screenX,e.screenY\n        屏幕\n    \n    2. 相对于文档显示区左上角的位置\n        e.clientX,e.clientY\n            客户端\n    \n    3. 相对于当前事件元素的左上角的偏移量\n        e.offsetX,e.offsetY\n            偏移\n")])])]),t("p",[n._v("​"),t("br"),n._v("\n​"),t("br"),n._v("\n​"),t("br"),n._v("\n​"),t("br"),n._v("\n​"),t("br"),n._v("\n​")]),n._v(" "),t("h1",{attrs:{id:"总结dom优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结dom优化"}},[n._v("#")]),n._v(" 总结DOM优化")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('    1. 查找: 如果只要一个条件就可找到DOM元素时 首选 getElementByXXXX 返回的是动态集合 一条数据\n        如果查找条件复杂 首选 选择器条件查找  返回的是静态集合 多条数据\n        例如 元素.style.cssText="width:200;height:300px";\n        代替 元素.style.width="200px" .style.width="200";\n')])])]),t("p",[n._v("​"),t("br"),n._v("\n​"),t("br"),n._v("\n2. 修改样式 能一句话修改 就不用两句话修改  重排重")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("    3. 添加元素 为了减少重排重绘  仅减少操作DOM数的次数\n    \n    4. 如果同时添加父元素和子元素 先将子元素添加父元素 最后再将父元素一次性添加DOM树上  \n        如果父元素已创建 需要同时添加多个平级子元素 应该创建文档片段,将子元素先加入文档片段 最后在一次性将文档片段添加DOM树\n    \n    5. 尽量减少事件监听的个数: 事件委托 \n        遍历挨个访问 效率低 \n            1. 将事件绑定在父元素上一份 所有子元素冒泡共用\n            2. 用e.target 代替 this\n            3. 判断e.target 的特征 只有符合条件的目标元素才能执行后续正常的操作。\n")])])]),t("p",[n._v("​")]),n._v(" "),t("h2",{attrs:{id:"页面滚动事件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#页面滚动事件"}},[n._v("#")]),n._v(" 页面滚动事件:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("    1.  绑定页面滚动事件 window.onscroll=function(){...}\n  \n    2.  获得页面滚动的距离:其实就是页面超出文档显示区的距离\n            var scrollTop=document.body.scrollTop||document.document.doucmentElement.scrollTop\n    \n    3.  用程序动态滚动到指定位置:window.scorllTo(横向滚动位置,纵向滚动到的位置)\n        window.scrollTo(0,纵向滚动到的位置)\n        window.scrollBy(0,纵向滚动的距离 增量)\n")])])]),t("p",[n._v("​")]),n._v(" "),t("p",[n._v("Task")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v('1. 将location.search 转为对象\n    地址栏:http://localhost:3000/register?\n    uname=dingding&upwd=123344&favs=runing&favs=swimming&favs=basketball\n    location.search 会拿到 \n    ?\n    uname=dingding&upwd=123344&favs=runing&favs=swimming&favs=basketball\n    定义一个函数 function search2Obj(strSearch){\n        返回一个对象\n    } \n    var obj=search2Obj(str);\n    console.log(obj);\n    /*obj:{\n        uname:"dingding",\n        upwd:"1232343",\n        favs:[" runing",....]\n    }*/\n\n//要求: search 字符串中变量名不确定变量个数   \n')])])]),t("p",[n._v("​")]),n._v(" "),t("p",[n._v("​")]),n._v(" "),t("p",[n._v("​")])])}),[],!1,null,null,null);a.default=s.exports}}]);